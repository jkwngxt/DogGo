// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement()) @map("u_id")
  name     String @map("u_name")
  username String @unique @map("u_username")
  password String @map("u_password")
  email    String @unique @map("u_email")
  tel      String @map("u_tel") @db.VarChar(10)
  address  String @map("u_address")
  zone     String @map("u_zone")

  // relationship
  dogs           Dog[]
  coupons        Coupon[]
  billings       Billing[]
  reviews        Review[]
  WalkingService WalkingService[]

  @@map("user")
}

model Dog {
  id    Int    @id @default(autoincrement()) @map("d_id")
  name  String @map("d_name")
  breed String @map("d_breed")

  // relationship
  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int  @map("u_id")

  @@map("dog")
}

model DogWalker {
  id       Int      @id @default(autoincrement()) @map("dw_id")
  name     String   @map("dw_name")
  username String   @unique @map("dw_username")
  password String   @map("dw_password")
  email    String   @unique @map("dw_email")
  pic      String   @map("dw_pic")
  tel      String?  @map("dw_tel") @db.VarChar(10)
  address  String?  @map("dw_address")
  zone     String[] @map("dw_zone")
  status   Int      @default(0) @map("dw_status") @db.SmallInt

  // relationship
  services WalkingService[]

  @@map("dog_walker")
}

model WalkingService {
  id      Int      @id @default(autoincrement()) @map("ws_id")
  request DateTime @map("ws_request") @db.Timestamp
  accept  DateTime @map("ws_accept") @db.Timestamp
  date    DateTime @map("ws_date") @db.Date
  time    Int[]    @map("ws_time") @db.SmallInt
  price   Decimal  @map("ws_price") @db.Decimal(8, 2)
  status  Int      @map("ws_status") @db.SmallInt

  // relationship
  dogWalker   DogWalker @relation(fields: [dogWalkerId], references: [id])
  dogWalkerId Int       @map("dw_id")

  dogs Int[] @map("d_id") //cant be fk because collect in list

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("u_id")

  billing Billing?
  review  Review?

  @@map("walking_service")
}

model ServiceProvider {
  id       Int    @id @default(autoincrement()) @map("sp_id")
  name     String @map("sp_name")
  des      String @map("sp_des")
  username String @unique @map("sp_username")
  password String @map("sp_password")
  email    String @unique @map("sp_email")
  tel      String @map("sp_tel") @db.VarChar(10)
  address  String @map("sp_address")
  zone     String @map("sp_zone")
  status   Int    @default(0) @map("sp_status") @db.SmallInt

  // relationship
  services Service[]

  @@map("service_provider")
}

model Service {
  id      Int     @id @default(autoincrement()) @map("s_id")
  visible Boolean @map("s_vis")
  name    String  @map("s_name")
  type    String  @map("s_type")
  des     String  @map("s_des")
  price   Decimal @map("s_price") @db.Decimal(8, 2)

  // relationship
  provider   ServiceProvider @relation(fields: [providerId], references: [id])
  providerId Int             @map("sp_id")

  coupons Coupon[]

  @@map("service")
}

model Coupon {
  id       String   @id @map("c_id") @db.Char(12)
  price    Decimal  @map("c_price") @db.Decimal(8, 2)
  purchase DateTime @map("c_purchase") @db.Timestamp
  status   Int      @map("c_status") @db.SmallInt

  // relationship
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int     @map("s_id")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("u_id")

  billing Billing?
  review  Review?

  @@map("coupon")
}

model Billing {
  id     Int       @id @default(autoincrement()) @map("b_id")
  time   DateTime? @map("b_time") @db.Timestamp
  status Int       @map("b_status") @db.SmallInt
  total  Decimal   @map("total") @db.Decimal(8, 2)

  // relationship
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("u_id")

  coupon   Coupon? @relation(fields: [couponId], references: [id])
  couponId String? @unique @map("c_id")

  walkingService   WalkingService? @relation(fields: [walkingServiceId], references: [id])
  walkingServiceId Int?            @unique @map("ws_id")

  @@map("billing")
}

model Review {
  id     Int      @id @default(autoincrement()) @map("r_id")
  time   DateTime @map("r_time") @db.Timestamp
  rating Int      @map("rating") @db.SmallInt
  text   String?  @map("r_text")

  // relationship
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("u_id")

  coupon   Coupon? @relation(fields: [couponId], references: [id])
  couponId String? @unique @map("c_id")

  walkingService   WalkingService? @relation(fields: [walkingServiceId], references: [id])
  walkingServiceId Int?            @unique @map("ws_id")

  @@map("review")
}
